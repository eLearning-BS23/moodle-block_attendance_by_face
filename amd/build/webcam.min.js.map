{"version":3,"file":"webcam.min.js","sources":["../src/webcam.js"],"sourcesContent":["export default class Webcam {\n  constructor(\n    webcamElement,\n    facingMode = \"user\",\n    canvasElement = null,\n    snapSoundElement = null\n  ) {\n    this._webcamElement = webcamElement;\n    this._webcamElement.width = this._webcamElement.width || 640;\n    this._webcamElement.height =\n      this._webcamElement.height || this._webcamElement.width * (3 / 4);\n    this._facingMode = facingMode;\n    this._webcamList = [];\n    this._streamList = [];\n    this._selectedDeviceId = \"\";\n    this._canvasElement = canvasElement;\n    this._snapSoundElement = snapSoundElement;\n  }\n\n  get facingMode() {\n    return this._facingMode;\n  }\n\n  set facingMode(value) {\n    this._facingMode = value;\n  }\n\n  get webcamList() {\n    return this._webcamList;\n  }\n\n  get webcamCount() {\n    return this._webcamList.length;\n  }\n\n  get selectedDeviceId() {\n    return this._selectedDeviceId;\n  }\n\n  /* Get all video input devices info */\n  getVideoInputs(mediaDevices) {\n    this._webcamList = [];\n    mediaDevices.forEach((mediaDevice) => {\n      if (mediaDevice.kind === \"videoinput\") {\n        this._webcamList.push(mediaDevice);\n      }\n    });\n    if (this._webcamList.length == 1) {\n      this._facingMode = \"user\";\n    }\n    return this._webcamList;\n  }\n\n  /* Get media constraints */\n  getMediaConstraints() {\n    var videoConstraints = {};\n    if (this._selectedDeviceId == \"\") {\n      videoConstraints.facingMode = this._facingMode;\n    } else {\n      videoConstraints.deviceId = { exact: this._selectedDeviceId };\n    }\n    var constraints = {\n      video: videoConstraints,\n      audio: false,\n    };\n    return constraints;\n  }\n\n  /* Select camera based on facingMode */\n  selectCamera() {\n    for (let webcam of this._webcamList) {\n      if (\n        (this._facingMode == \"user\" &&\n          webcam.label.toLowerCase().includes(\"front\")) ||\n        (this._facingMode == \"enviroment\" &&\n          webcam.label.toLowerCase().includes(\"back\"))\n      ) {\n        this._selectedDeviceId = webcam.deviceId;\n        break;\n      }\n    }\n  }\n\n  /* Change Facing mode and selected camera */\n  flip() {\n    this._facingMode = this._facingMode == \"user\" ? \"enviroment\" : \"user\";\n    this._webcamElement.style.transform = \"\";\n    this.selectCamera();\n  }\n\n  /*\n      1. Get permission from user\n      2. Get all video input devices info\n      3. Select camera based on facingMode\n      4. Start stream\n    */\n  async start(startStream = true) {\n    return new Promise((resolve, reject) => {\n      this.stop();\n      navigator.mediaDevices\n        .getUserMedia(this.getMediaConstraints()) //get permisson from user\n        .then((stream) => {\n          this._streamList.push(stream);\n          this.info() //get all video input devices info\n            .then((webcams) => {\n              this.selectCamera(); //select camera based on facingMode\n              window.console.log(webcams);\n              if (startStream) {\n                this.stream()\n                  .then((facingMode) => {\n                    resolve(this._facingMode);\n                    window.console.log(facingMode);\n                  })\n                  .catch((error) => {\n                    reject(error);\n                  });\n              } else {\n                resolve(this._selectedDeviceId);\n              }\n            })\n            .catch((error) => {\n              reject(error);\n            });\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  /* Get all video input devices info */\n  async info() {\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) => {\n          this.getVideoInputs(devices);\n          resolve(this._webcamList);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  /* Start streaming webcam to video element */\n  async stream() {\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices\n        .getUserMedia(this.getMediaConstraints())\n        .then((stream) => {\n          this._streamList.push(stream);\n          this._webcamElement.srcObject = stream;\n          if (this._facingMode == \"user\") {\n            this._webcamElement.style.transform = \"scale(-1,1)\";\n          }\n          this._webcamElement.play();\n          resolve(this._facingMode);\n        })\n        .catch((error) => {\n          window.console.log(error);\n          reject(error);\n        });\n    });\n  }\n\n  /* Stop streaming webcam */\n  stop() {\n    this._streamList.forEach((stream) => {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    });\n  }\n\n  snap() {\n    if (this._canvasElement !== null) {\n      if (this._snapSoundElement !== null) {\n        this._snapSoundElement.play();\n      }\n      this._canvasElement.height = this._webcamElement.scrollHeight;\n      this._canvasElement.width = this._webcamElement.scrollWidth;\n      let context = this._canvasElement.getContext(\"2d\");\n      if (this._facingMode == \"user\") {\n        context.translate(this._canvasElement.width, 0);\n        context.scale(-1, 1);\n      }\n      context.clearRect(\n        0,\n        0,\n        this._canvasElement.width,\n        this._canvasElement.height\n      );\n      context.drawImage(\n        this._webcamElement,\n        0,\n        0,\n        this._canvasElement.width,\n        this._canvasElement.height\n      );\n      let data = this._canvasElement.toDataURL(\"image/png\");\n      return data;\n    } else {\n      throw \"canvas element is missing\";\n    }\n  }\n}\n"],"names":["constructor","webcamElement","facingMode","canvasElement","snapSoundElement","_webcamElement","width","this","height","_facingMode","_webcamList","_streamList","_selectedDeviceId","_canvasElement","_snapSoundElement","value","webcamList","webcamCount","length","selectedDeviceId","getVideoInputs","mediaDevices","forEach","mediaDevice","kind","push","getMediaConstraints","videoConstraints","deviceId","exact","video","audio","selectCamera","webcam","label","toLowerCase","includes","flip","style","transform","start","startStream","Promise","resolve","reject","stop","navigator","getUserMedia","then","stream","info","webcams","window","console","log","catch","error","enumerateDevices","devices","srcObject","play","getTracks","track","snap","scrollHeight","scrollWidth","context","getContext","translate","scale","clearRect","drawImage","toDataURL"],"mappings":"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"}